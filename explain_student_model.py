# -*- coding: utf-8 -*-
"""explain_student_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gf4mjv92YD0FQl7RlD4iNfIey4539YZU
"""

import torch
import matplotlib.pyplot as plt
from captum.attr import IntegratedGradients, visualize_image_attr
import numpy as np
from torchvision.transforms import ToTensor, Resize, Normalize
from PIL import Image
import os
from BaseonMobileNet_Training import BaseonMobileNet
from Coarse_grained import SimpleCNN

mobilenet_model = BaseonMobileNet(num_classes=2)
mobilenet_model.load_state_dict(torch.load('/content/Newmobilenet_model.pth'))
mobilenet_model.eval()

student_model = SimpleCNN(input_size=1024, output_size=2)
student_model.load_state_dict(torch.load('/content/drive/mydrive/simple_cnn_student_model.pth'))
student_model.eval()

transform = torch.nn.Sequential(
    Resize((224, 224)),
    ToTensor(),
    Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
)

def extract_mobilenet_features(image_tensor):
    with torch.no_grad():
        return mobilenet_model(image_tensor).view(-1).cpu().numpy()

def explain_images_in_folder(input_folder, output_folder):

    os.makedirs(output_folder, exist_ok=True)

    image_files = [f for f in os.listdir(input_folder) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]

    for image_file in image_files:
        image_path = os.path.join(input_folder, image_file)
        output_image_path = os.path.join(output_folder, f'heatmap_{image_file}')

        image = Image.open(image_path).convert('RGB')
        input_tensor = transform(image).unsqueeze(0)

        features = extract_mobilenet_features(input_tensor)

        integrated_gradients = IntegratedGradients(student_model)
        attributions, _ = integrated_gradients.attribute(torch.tensor([features]), target=0, return_convergence_delta=True)

        fig, ax = plt.subplots(figsize=(6, 6))
        visualize_image_attr(np.transpose(attributions.squeeze().cpu().detach().numpy(), (1, 2, 0)),
                             np.transpose(input_tensor.squeeze().cpu().detach().numpy(), (1, 2, 0)),
                             method='heat_map',
                             sign='all',
                             show_colorbar=True,
                             title=f'Integrated Gradients - {image_file}',
                             plt_fig_ax=(fig, ax))
        fig.savefig(output_image_path)
        plt.close(fig)

input_folder = '/content/drive/mydrive/explain'
output_folder = '/content/explain2'
explain_images_in_folder(input_folder, output_folder)
# -*- coding: utf-8 -*-
"""Interpretable_MobileNet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gmbxhVXM3CK22usYV6BuOo4SVGUHGwke
"""

import os
import torch
import torch.nn.functional as F
import numpy as np
import matplotlib.pyplot as plt
from torchvision import transforms
from PIL import Image
from BaseonMobileNet_Training import BaseonMobileNet

model = BaseonMobileNet(num_classes=2)
model.load_state_dict(torch.load('/content/Newmobilenet_model.pth'))
model.eval()

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

def generate_cam(model, image_path, output_dir):
    img = Image.open(image_path).convert('RGB')
    img_tensor = transform(img).unsqueeze(0)

    with torch.no_grad():
        _, activations = model(img_tensor)

    target_layer_activations = activations[-1].squeeze()
    class_idx = torch.argmax(model(img_tensor)[0]).item()

    gradients = torch.autograd.grad(
        outputs=model(img_tensor)[0, class_idx],
        inputs=target_layer_activations,
        grad_outputs=torch.ones_like(model(img_tensor)[0, class_idx]),
        create_graph=True)[0]

    weights = torch.mean(gradients, dim=[1, 2], keepdim=True)
    cam = torch.sum(weights * target_layer_activations, dim=0).cpu().numpy()

    cam = np.maximum(cam, 0)
    cam = cam / cam.max()
    cam = np.uint8(255 * cam)

    heatmap = plt.cm.jet(cam)[:, :, :3] * 255
    heatmap = Image.fromarray(np.uint8(heatmap))
    heatmap = heatmap.resize(img.size, Image.ANTIALIAS)
    superimposed_img = Image.blend(img, heatmap, alpha=0.5)

    base_filename = os.path.basename(image_path)
    output_path = os.path.join(output_dir, base_filename)
    superimposed_img.save(output_path)

input_dir = '/content/Roblow/Violencedata/test'
output_dir = '/content/Roblow/Violencedata/cam_results'
os.makedirs(output_dir, exist_ok=True)

supported_extensions = ('.jpg', '.jpeg', '.png', '.bmp')
for filename in os.listdir(input_dir):
    if filename.lower().endswith(supported_extensions):
        image_path = os.path.join(input_dir, filename)
        generate_cam(model, image_path, output_dir)

print(f'CAM HeatMap Saveï¼š{output_dir}')